//
//  cujs_runtime.h
//  cujs-runtime
//
//  Created by Jerry Marino on 7/15/14.
//  Copyright (c) 2014 Jerry Marino. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <objc/runtime.h>

@interface NSObject (CUJSFunction)

+ (id)cujs_new;

- (NSMutableDictionary *)_cujs_environment;

+ (void)_cujs_setParent:(id)parent;
+ (id)_cujs_parent;

// Define a property for valid ObjC properties
// it is undefined behavior to assign names that
// don't comply with ObjC naming conventions
+ (BOOL)cujs_defineProperty:(const char *)propertyName;

- (id)_cujs_parent;

- (id)_cujs_body:(id)args,...;

- (BOOL)cujs_defineProperty:(const char *)propertyName;

- (void)_cujs_env_setValue:(id)value forKey:(NSString *)key;
- (void)_cujs_env_setValue:(id)value declareKey:(NSString *)key;
- (id)_cujs_env_valueForKey:(NSString *)key;

@end

@interface NSObject (CUJSExtend)

+ (id)extend:(NSString *)name;

@end

#pragma mark - Public

typedef id JSFunctionBodyIMP (id instance, SEL cmd, id arg1,...);

extern void *cujs_defineJSFunction(const char *name,
                              JSFunctionBodyIMP body);

extern void *cujs_newJSObjectClass(void);

extern void *cujs_newSubclass(Class aSuperClass, NSString *name);

// Value can be a class, or variable pointer
// accessors are automatically generated by invoking
// [value objc_defineProperty:]
extern void *cujs_assignProperty(id object,
                                   const char *name,
                                   id value);

// dynamically dispatch an invocation of a pointer with arguments
//
// if target is a class class, a new instance of the class is created
// then invokes body:
//
// otherwise it simply invokes body:
extern void *cujs_invoke(void *target, ...);

extern id cujs_NaN;
extern id cujs_Undefined;
extern id cujs_GlobalScope;

@interface NSObject (CUJSOperators)

- cujs_add:(id)value;
- cujs_subtract:(id)value;
- cujs_multiply:(id)value;
- cujs_divide:(id)value;

- cujs_mod:(id)value;

- cujs_bitor:(id)value;
- cujs_bitxor:(id)value;
- cujs_bitand:(id)value;
// "<<"
- cujs_shiftleft:(id)value;
// ">>"
- cujs_shiftright:(id)value;
// ">>>"
- cujs_shiftrightright:(id)value;
- cujs_increment;
- cujs_decrement;

- (bool)cujs_boolValue;

@end

@interface NSNumber (CUJSOperators)

// Bool value is semantically equal to int value in JS land
// so comparing a NSDoubleNumber that is 0.0 will be incorrect in JS
// and zero is false
- (bool)cujs_boolValue;

@end


@interface NSString (CUJSOperators)

// a string that has characters is true
- (bool)cujs_boolValue;

@end

@interface NSObject (CUJSSubscripting)

// Indexes should be strings but will be casted to a string
// via -[NSObject stringValue]
//
// If a property has been created with subscripting
// accessors are NOT automatically added
- (void)cujs_ss_setValue:(id)value forKey:(id)key;
- (id)cujs_ss_valueForKey:(id)index;

- _cujs_keyed_properties;

@end

@interface NSObject (CUJSDebug)

@end

@interface CUJSPrototype : NSObject

@property (nonatomic) Class targetClass;

@end

