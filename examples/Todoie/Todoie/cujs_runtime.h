//
//  cujs_runtime.h
//  cujs-runtime
//
//  Created by Jerry Marino on 7/15/14.
//  Copyright (c) 2014 Jerry Marino. All rights reserved.
//

#import <Foundation/Foundation.h>
#import <objc/runtime.h>

typedef enum ObjCType {
    /**
     * \brief Reprents an invalid type (e.g., where no type is available).
     */
    ObjCType_Invalid = 0,
    
    /**
     * \brief A type whose specific kind is not exposed via this
     * interface.
     */
    ObjCType_Unexposed = 1,
    
    /* Builtin types */
    ObjCType_Void = 2,
    ObjCType_Bool = 3,
    ObjCType_Char_U = 4,
    ObjCType_UChar = 5,
    ObjCType_Char16 = 6,
    ObjCType_Char32 = 7,
    ObjCType_UShort = 8,
    ObjCType_UInt = 9,
    ObjCType_ULong = 10,
    ObjCType_ULongLong = 11,
    ObjCType_UInt128 = 12,
    ObjCType_Char_S = 13,
    ObjCType_SChar = 14,
    ObjCType_WChar = 15,
    ObjCType_Short = 16,
    ObjCType_Int = 17,
    ObjCType_Long = 18,
    ObjCType_LongLong = 19,
    ObjCType_Int128 = 20,
    ObjCType_Float = 21,
    ObjCType_Double = 22,
    ObjCType_LongDouble = 23,
    ObjCType_NullPtr = 24,
    ObjCType_Overload = 25,
    ObjCType_Dependent = 26,
    ObjCType_ObjCId = 27,
    ObjCType_ObjCClass = 28,
    ObjCType_ObjCSel = 29,
    ObjCType_FirstBuiltin = ObjCType_Void,
    ObjCType_LastBuiltin  = ObjCType_ObjCSel,
    
    ObjCType_Complex = 100,
    ObjCType_Pointer = 101,
    ObjCType_BlockPointer = 102,
    ObjCType_LValueReference = 103,
    ObjCType_RValueReference = 104,
    ObjCType_Record = 105,
    ObjCType_Enum = 106,
    ObjCType_Typedef = 107,
    ObjCType_ObjCInterface = 108,
    ObjCType_ObjCObjectPointer = 109,
    ObjCType_FunctionNoProto = 110,
    ObjCType_FunctionProto = 111,
    ObjCType_ConstantArray = 112,
    ObjCType_Vector = 113,
    ObjCType_IncompleteArray = 114,
    ObjCType_VariableArray = 115,
    ObjCType_DependentSizedArray = 116,
    ObjCType_MemberPointer = 117
} ObjCType;

@interface NSObject (CUJSFunction)

+ (id)cujs_new;

- (NSMutableDictionary *)_cujs_environment;

+ (void)_cujs_setParent:(id)parent;
+ (id)_cujs_parent;

// Define a property for valid ObjC properties
// it is undefined behavior to assign names that
// don't comply with ObjC naming conventions
+ (BOOL)cujs_defineProperty:(const char *)propertyName;

- (id)_cujs_parent;

- (id)_cujs_body:(id)args,...;

- (BOOL)cujs_defineProperty:(const char *)propertyName;

- (void)_cujs_env_setValue:(id)value forKey:(NSString *)key;
- (void)_cujs_env_setValue:(id)value declareKey:(NSString *)key;
- (id)_cujs_env_valueForKey:(NSString *)key;

@end

@interface NSObject (CUJSExtend)

+ (id)extend:(NSString *)name;

@end

#pragma mark - Public

typedef id JSFunctionBodyIMP (id instance, SEL cmd, id arg1,...);

extern void *cujs_defineJSFunction(const char *name,
                              JSFunctionBodyIMP body);

typedef struct CUJSStructField {
    char *name;
    char *typeName;
    int offset;
    int encoding;
} CUJSStructField;

// Define a struct by name and fields
// TODO: register a class for the struct by name
extern void *cujs_defineStruct(const char *name, size_t size, CUJSStructField fields[]);

extern void *cujs_newJSObjectClass(void);

extern void *cujs_newSubclass(Class aSuperClass, NSString *name);

// Value can be a class, or variable pointer
// accessors are automatically generated by invoking
// [value objc_defineProperty:]
extern void *cujs_assignProperty(id object,
                                   const char *name,
                                   id value);

// dynamically dispatch an invocation of a pointer with arguments
//
// if target is a class class, a new instance of the class is created
// then invokes body:
//
// otherwise it simply invokes body:
extern void *cujs_invoke(void *target, ...);

extern id cujs_NaN;
extern id cujs_Undefined;
extern id cujs_GlobalScope;

@interface NSObject (CUJSOperators)

- cujs_add:(id)value;
- cujs_subtract:(id)value;
- cujs_multiply:(id)value;
- cujs_divide:(id)value;

- cujs_mod:(id)value;

- cujs_bitor:(id)value;
- cujs_bitxor:(id)value;
- cujs_bitand:(id)value;
// "<<"
- cujs_shiftleft:(id)value;
// ">>"
- cujs_shiftright:(id)value;
// ">>>"
- cujs_shiftrightright:(id)value;
- cujs_increment;
- cujs_decrement;

- (bool)cujs_boolValue;

@end

@interface NSNumber (CUJSOperators)

// Bool value is semantically equal to int value in JS land
// so comparing a NSDoubleNumber that is 0.0 will be incorrect in JS
// and zero is false
- (bool)cujs_boolValue;

@end


@interface NSString (CUJSOperators)

// a string that has characters is true
- (bool)cujs_boolValue;

@end

@interface NSObject (CUJSSubscripting)

// Indexes should be strings but will be casted to a string
// via -[NSObject stringValue]
//
// If a property has been created with subscripting
// accessors are NOT automatically added
- (void)cujs_ss_setValue:(id)value forKey:(id)key;
- (id)cujs_ss_valueForKey:(id)index;

- _cujs_keyed_properties;

@end

@interface NSObject (CUJSDebug)

+ (void)cujs_printMethods;
- (void)cujs_printMethods;

@end

@interface CUJSPrototype : NSObject

@property (nonatomic) Class targetClass;

@end


extern void cujs_registerStruct(const char *name);
extern BOOL cujs_isStruct(const char *name);

@interface NSObject (CUJSStruct)

// NSObjects are used internally as struct representations
// structs with ints and floats are supported for now
- (id)structValue;

// Convert back to the original struct as a pointer
- (char *)toStruct;

+ (BOOL)cujs_isStruct;
- (BOOL)cujs_isStruct;

@end

// Allocate an instance of a struct with a name and fields
// struct must be defined prior
extern void *objc_Struct(NSString *nameString, ...);

